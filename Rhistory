runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
library(shiny); runApp('app_main.R')
runApp('app_main.R')
runApp()
runApp('app_main.R')
runApp()
runApp('app_main.R')
runApp('app_main.R')
runApp()
library(shiny); runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
library("htmltools")
library("htmltools")
addLabel <- function(data) {
data$label <- paste0(
'<b>', ifelse(is.na(data$`Province/State`), data$`Country/Region`, data$`Province/State`), '</b><br>
<table style="width:120px;">
<tr><td>Confirmed:</td><td align="right">', data$confirmed, '</td></tr>
<tr><td>Deceased:</td><td align="right">', data$deceased, '</td></tr>
<tr><td>Estimated Recoveries:</td><td align="right">', data$recovered, '</td></tr>
<tr><td>Active:</td><td align="right">', data$active, '</td></tr>
</table>'
)
data$label <- lapply(data$label, HTML)
return(data)
}
map <- leaflet(addLabel(data_latest)) %>%
setMaxBounds(-180, -90, 180, 90) %>%
setView(0, 20, zoom = 2) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Light") %>%
addProviderTiles(providers$HERE.satelliteDay, group = "Satellite") %>%
addLayersControl(
baseGroups    = c("Light", "Satellite"),
overlayGroups = c("Confirmed", "Confirmed (per capita)", "Estimated Recoveries", "Deceased", "Active", "Active (per capita)")
) %>%
hideGroup("Confirmed (per capita)") %>%
hideGroup("Estimated Recoveries") %>%
hideGroup("Deceased") %>%
hideGroup("Active") %>%
hideGroup("Active (per capita)") %>%
addEasyButton(easyButton(
icon    = "glyphicon glyphicon-globe", title = "Reset zoom",
onClick = JS("function(btn, map){ map.setView([20, 0], 2); }"))) %>%
addEasyButton(easyButton(
icon    = "glyphicon glyphicon-map-marker", title = "Locate Me",
onClick = JS("function(btn, map){ map.locate({setView: true, maxZoom: 6}); }")))
observe({
req(input$timeSlider, input$overview_map_zoom)
zoomLevel               <- input$overview_map_zoom
data                    <- data_atDate(input$timeSlider) %>% addLabel()
data$confirmedPerCapita <- data$confirmed / data$population * 100000
data$activePerCapita    <- data$active / data$population * 100000
leafletProxy("overview_map", data = data) %>%
clearMarkers() %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(confirmed^(zoomLevel / 2)),
stroke       = FALSE,
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group        = "Confirmed"
) %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(confirmedPerCapita^(zoomLevel)),
stroke       = FALSE,
color        = "#00b3ff",
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group        = "Confirmed (per capita)"
) %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(recovered^(zoomLevel)),
stroke       = FALSE,
color        = "#000000",
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group = "Estimated Recoveries"
) %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(deceased^(zoomLevel)),
stroke       = FALSE,
color        = "#EEEEEE",
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group        = "Deceased"
) %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(active^(zoomLevel / 2)),
stroke       = FALSE,
color        = "#000000",
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group        = "Active"
) %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(activePerCapita^(zoomLevel)),
stroke       = FALSE,
color        = "#EEEEEE",
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group        = "Active (per capita)"
)
})
output$overview_map <- renderLeaflet(map)
View(data)
library(shiny); runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
view(data_evolution$confirmed)
view(data_evolution)
print(confirmed_total = sum(value_confirmed, na.rm = T))
data <- data_evolution
data$confirmed <- data_evolution$var == "confirmed"
head(data$confirmed)
runApp('app_main.R')
view(data_confirmed_sub)
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
library(shiny); runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
library(shiny); runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
library(shiny); runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
?aes
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
#DATA PROCESSING AND CLEANING
data_confirmed <- read.csv("F:/R-Shiny Project/COVID-19_Analysis/data/time_series_covid19_confirmed_global.csv",sep=',', head=TRUE,check.names =FALSE )
data_deceased <- read.csv("F:/R-Shiny Project/COVID-19_Analysis/data/time_series_covid19_deaths_global.csv",sep=',', head=TRUE,check.names =FALSE)
data_recovered <- read.csv("F:/R-Shiny Project/COVID-19_Analysis/data/time_series_covid19_recovered_global.csv",sep=',', head=TRUE,check.names =FALSE)
data_weather <- read.csv("F:/R-Shiny Project/COVID-19_Analysis/data/covid_weather_dataset.csv")
current_date <- as.Date(names(data_confirmed)[ncol(data_confirmed)], format = "%m/%d/%y")
changed_date <- file.info("data/covid19JHU.zip")$mtime
# Get data by country
#Confirmed Cases
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
#Recovered Cases
data_recovered_sub <- data_recovered %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_recovered)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("recovered" = sum(value, na.rm = T))
#Deceased Cases
data_deceased_sub <- data_deceased %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_deceased)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("deceased" = sum(value, na.rm = T))
data_evolution <- data_confirmed_sub %>%
full_join(data_deceased_sub) %>%
ungroup() %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
arrange(date) %>%
group_by(`Province/State`, `Country/Region`, Lat, Long) %>%
mutate(
recovered = lag(confirmed, 14, default = 0) - deceased,
recovered = ifelse(recovered > 0, recovered, 0),
active = confirmed - recovered - deceased #assessing active cases
) %>%
pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
ungroup()
# Calculating new cases
data_evolution <- data_evolution %>%
group_by(`Province/State`, `Country/Region`) %>%
mutate(value_new = value - lag(value, 4, default = 0)) %>%
ungroup()
#Accessing population here to calculate per 100k parameters in data table
population <- wb(country = "countries_only", indicator = "SP.POP.TOTL", startdate = 2018, enddate = 2020) %>%
select(country, value) %>%
rename(population = value)
countryNamesPop <- c("Brunei Darussalam", "Congo, Dem. Rep.", "Congo, Rep.", "Czech Republic", "Egypt, Arab Rep.", "Iran, Islamic Rep.", "Korea, Rep.", "St. Lucia", "West Bank and Gaza", "Russian Federation", "Slovak Republic", "United States", "St. Vincent and the Grenadines", "Venezuela, RB")
countryNamesDat  <- c("Brunei", "Congo (Kinshasa)", "Congo (Brazzaville)", "Czechia", "Egypt", "Iran", "Korea, South", "Saint Lucia", "occupied Palestinian territory", "Russia", "Slovakia", "US", "Saint Vincent and the Grenadines", "Venezuela")
population[ which(population$country %in% countryNamesPop), "country"] <- countryNamesDat
noDataCountries <- data.frame(
country = c("Cruise Ship", "Guadeloupe", "Guernsey", "Holy See", "Jersey", "Martinique", "Reunion", "Taiwan*"),
population = c(3700, 395700, 63026, 800, 106800, 376480, 859959, 23780452)
)
population <- bind_rows(population, noDataCountries)
data_evolution <- data_evolution %>%
left_join(population, by = c("Country/Region" = "country"))
library(shiny); runApp('app_main.R')
library(Hmisc)
library(reshape2)
library(ggplot2)
#data_weather <- read.csv("F:/R-Shiny Project/covid_weather_dataset.xlsx",sep=',', head=TRUE,check.names =FALSE)
res<- cor(data_weather)
x<-round(res, 2)
rcorr(x, type = c("spearman"))
cormat <- round(cor(x),2)
melted_cormat <- melt(cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
reorder_cormat <- function(cormat){
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
#upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value)) +
geom_tile(color = "white")+
scale_fill_gradient2(low = "orange", high = "yellow", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
library(shiny); runApp('app_main.R')
runApp('app_main.R')
runApp('app_main.R')
view(data_evolution)
view(data)
runApp('app_main.R')
View(data)
runApp('app_main.R')
runApp('app_main.R')
view(data)
runApp()
view(data)
data <- getFullTableData1("Country/Region")
runApp()
view(data)
getFullTableData1 <- function(groupBy) {
padding_left <- max(str_length(data_evolution$value_new), na.rm = TRUE)
data <- data_evolution %>%
filter(date == current_date) %>%
pivot_wider(names_from = var, values_from = c(value, value_new)) %>%
select(-date, -Lat, -Long) %>%
add_row(
"Province/State"      = "World",
"Country/Region"      = "World",
"population"          = 7800000000,
"value_confirmed"     = sum(.$value_confirmed, na.rm = T),
"value_new_confirmed" = sum(.$value_new_confirmed, na.rm = T),
"value_recovered"     = sum(.$value_recovered, na.rm = T),
"value_new_recovered" = sum(.$value_new_recovered, na.rm = T),
"value_deceased"      = sum(.$value_deceased, na.rm = T),
"value_new_deceased"  = sum(.$value_new_deceased, na.rm = T),
"value_active"        = sum(.$value_active, na.rm = T),
"value_new_active"    = sum(.$value_new_active, na.rm = T)
) %>%
group_by(!!sym(groupBy)) %>%
summarise(
confirmed_total     = sum(value_confirmed, na.rm = T),
confirmed_new       = sum(value_new_confirmed, na.rm = T),
confirmed_totalNorm = round(sum(value_confirmed, na.rm = T) / max(population,na.rm = T) * 100000, 2),
recovered_total     = sum(value_recovered, na.rm = T),
recovered_new       = sum(value_new_recovered, na.rm = T),
deceased_total      = sum(value_deceased, na.rm = T),
deceased_new        = sum(value_new_deceased, na.rm = T),
active_total        = sum(value_active, na.rm = T),
active_new          = sum(value_new_active, na.rm = T),
active_totalNorm    = round(sum(value_active, na.rm = T) / max(population,na.rm = T) * 100000, 2)
) %>%
mutate(
"confirmed_newPer" = confirmed_new / (confirmed_total - confirmed_new) * 100,
"recovered_newPer" = recovered_new / (recovered_total - recovered_new) * 100,
"deceased_newPer"  = deceased_new / (deceased_total - deceased_new) * 100,
"active_newPer"    = active_new / (active_total - active_new) * 100
) %>%
mutate_at(vars(contains('_newPer')), list(~na_if(., Inf))) %>%
mutate_at(vars(contains('_newPer')), list(~na_if(., 0))) %>%
mutate(
confirmed_new = str_c(str_pad(confirmed_new, width = padding_left, side = "left", pad = "0"), "|",
confirmed_new, if_else(!is.na(confirmed_newPer), sprintf(" (%+.2f %%)", confirmed_newPer), "")),
recovered_new = str_c(str_pad(recovered_new, width = padding_left, side = "left", pad = "0"), "|",
recovered_new, if_else(!is.na(recovered_newPer), sprintf(" (%+.2f %%)", recovered_newPer), "")),
deceased_new  = str_c(str_pad(deceased_new, width = padding_left, side = "left", pad = "0"), "|",
deceased_new, if_else(!is.na(deceased_newPer), sprintf(" (%+.2f %%)", deceased_newPer), "")),
active_new    = str_c(str_pad(active_new, width = padding_left, side = "left", pad = "0"), "|",
active_new, if_else(!is.na(active_newPer), sprintf(" (%+.2f %%)", active_newPer), ""))
) %>%
as.data.frame()
}
view(data)
runApp('app_main.R')
library("htmltools")
addLabel <- function(data) {
data$label <- paste0(
'<b>', ifelse(is.na(data$`Province/State`), data$`Country/Region`, data$`Province/State`), '</b><br>
<table style="width:120px;">
<tr><td>Confirmed:</td><td align="right">', data$confirmed, '</td></tr>
<tr><td>Deceased:</td><td align="right">', data$deceased, '</td></tr>
<tr><td>Estimated Recoveries:</td><td align="right">', data$recovered, '</td></tr>
<tr><td>Active:</td><td align="right">', data$active, '</td></tr>
</table>'
)
data$label <- lapply(data$label, HTML)
return(data)
}
map <- leaflet(addLabel(data)) %>%
setMaxBounds(-180, -90, 180, 90) %>%
setView(0, 20, zoom = 2) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Light") %>%
addProviderTiles(providers$HERE.satelliteDay, group = "Satellite") %>%
addLayersControl(
baseGroups    = c("Light", "Satellite"),
overlayGroups = c("Confirmed", "Confirmed (per capita)", "Estimated Recoveries", "Deceased", "Active", "Active (per capita)")
) %>%
hideGroup("Confirmed (per capita)") %>%
hideGroup("Estimated Recoveries") %>%
hideGroup("Deceased") %>%
hideGroup("Active") %>%
hideGroup("Active (per capita)") %>%
addEasyButton(easyButton(
icon    = "glyphicon glyphicon-globe", title = "Reset zoom",
onClick = JS("function(btn, map){ map.setView([20, 0], 2); }"))) %>%
addEasyButton(easyButton(
icon    = "glyphicon glyphicon-map-marker", title = "Locate Me",
onClick = JS("function(btn, map){ map.locate({setView: true, maxZoom: 6}); }")))
observe({
req(input$timeSlider, input$overview_map_zoom)
zoomLevel               <- input$overview_map_zoom
data                    <- data_atDate(input$timeSlider) %>% addLabel()
data$confirmedPerCapita <- data$confirmed / data$population * 100000
data$activePerCapita    <- data$active / data$population * 100000
leafletProxy("overview_map", data) %>%
clearMarkers() %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(confirmed^(zoomLevel / 2)),
stroke       = FALSE,
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group        = "Confirmed"
) %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(confirmedPerCapita^(zoomLevel)),
stroke       = FALSE,
color        = "#00b3ff",
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group        = "Confirmed (per capita)"
) %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(recovered^(zoomLevel)),
stroke       = FALSE,
color        = "#000000",
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group = "Estimated Recoveries"
) %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(deceased^(zoomLevel)),
stroke       = FALSE,
color        = "#EEEEEE",
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group        = "Deceased"
) %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(active^(zoomLevel / 2)),
stroke       = FALSE,
color        = "#000000",
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group        = "Active"
) %>%
addCircleMarkers(
lng          = ~Long,
lat          = ~Lat,
radius       = ~log(activePerCapita^(zoomLevel)),
stroke       = FALSE,
color        = "#EEEEEE",
fillOpacity  = 0.5,
label        = ~label,
labelOptions = labelOptions(textsize = 15),
group        = "Active (per capita)"
)
})
output$overview_map <- renderLeaflet(map)
runApp('app_main.R')
print(data)
head(data)
runApp('app_main.R')
view(data)
runApp('app_main.R')
view(data)
runApp('app_main.R')
library(shiny); runApp('app_main.R')
